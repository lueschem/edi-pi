#!/bin/bash

# Small helper utility that creates Broadcom Raspberry Pi
# and u-boot bootloader archives.

set -o errexit
set -o nounset
set -o pipefail

echo_usage()
{
    echo "Usage: generate-archives BOOTLOADER_TYPE VERSION_LABEL"
    echo "Example: generate-archives raspberrypi 1.20180924"
    echo "Example: generate-archives u-boot v2019.10"
}

cleanup()
{
    rm -rf ${TEMPDIR}
}

cleanup_and_error()
{
    cleanup
    >&2 echo "Error: Abnormal script termination."
}

create_raspberrypi_archive()
{
    echo "Going to create raspberrypi archive!"
    tar -xf "${UPSTREAM_ARCHIVE}" -C "${TEMPDIR}/"
    
    BOOTLOADER_FILES=( "bootcode.bin" "LICENCE.broadcom" "fixup_cd.dat" "start_cd.elf" "fixup.dat"
                       "start_db.elf" "fixup_db.dat" "start.elf" "fixup_x.dat" "start_x.elf" 
                       "fixup4cd.dat" "fixup4.dat" "fixup4db.dat" "fixup4x.dat"
                       "start4cd.elf" "start4db.elf" "start4.elf" "start4x.elf" )

    mkdir ${TEMPDIR}/output
    for file in "${BOOTLOADER_FILES[@]}"
    do
        cp "${TEMPDIR}/firmware-${VERSION_LABEL}/boot/${file}" "${TEMPDIR}/output"
    done

    echo "${VERSION_LABEL}" > "${TEMPDIR}/output/raspberrypi-bootloader.version"
    
    FINAL_ARCHIVE="${SCRIPTDIR}/raspberrypi-bootloader.tar.gz"
    tar -cf "${FINAL_ARCHIVE}" -C "${TEMPDIR}/output" "."
    echo "Successfully created ${FINAL_ARCHIVE}!"
}

create_u_boot_archive()
{
    local ARCHITECTURE=$1
    local CONFIGURATION=$2
    local COMPILER_PREFIX=$3
    local RASPBERRY_PI_TYPE=$4

    echo "Going to create u-boot (${ARCHITECTURE}) archive!"
    WORKDIR="${TEMPDIR}/u-boot-${VERSION_LABEL#"v"}"
    rm -rf "${WORKDIR}"

    tar -xf "${UPSTREAM_ARCHIVE}" -C "${TEMPDIR}/"

    cd "${WORKDIR}"
    export CROSS_COMPILE="${COMPILER_PREFIX}"

    make "${CONFIGURATION}"

    make -j8

    mkdir -p ${TEMPDIR}/output/licenses.u-boot
    cp u-boot.bin ${TEMPDIR}/output
    cp Licenses/* ${TEMPDIR}/output/licenses.u-boot/
    echo "${VERSION_LABEL}" > "${TEMPDIR}/output/u-boot-bootloader.version"
    
    FINAL_ARCHIVE="${SCRIPTDIR}/u-boot-bootloader.${ARCHITECTURE}.${RASPBERRY_PI_TYPE}.tar.gz"
    tar -cf "${FINAL_ARCHIVE}" -C "${TEMPDIR}/output" "."
    echo "Successfully created ${FINAL_ARCHIVE}!"
}

if [[ "$#" -eq 1 && ( "$1" == "-h" || "$1" == "--help" ) ]]
then
    echo_usage
    exit 0
fi

if [ "$#" -ne 2 ]
then
    >&2 echo "Error: Illegal number of parameters."
    echo_usage
    exit 1
fi

if [[ $EUID -eq 0 ]]
then
    >&2 echo "Error: Do not run this script as root."
    exit 1
fi

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEMPDIR="$(mktemp -p ${SCRIPTDIR} -d -t .tmp.XXXXXXXX)"

trap cleanup_and_error EXIT

BOOTLOADER_TYPE=$1
VERSION_LABEL=$2

if [[ "${BOOTLOADER_TYPE}" == "raspberrypi" ]]
then
    ARCHIVE_URL="https://github.com/raspberrypi/firmware/archive/${VERSION_LABEL}.tar.gz"
    PROCESSING_INSTRUCTIONS=( "create_raspberrypi_archive" )
elif [[ "${BOOTLOADER_TYPE}" == "u-boot" ]]
then
    ARCHIVE_URL="https://github.com/u-boot/u-boot/archive/${VERSION_LABEL}.tar.gz"
    PROCESSING_INSTRUCTIONS=(
        "create_u_boot_archive armhf rpi_2_defconfig arm-linux-gnueabihf- pi2"
        "create_u_boot_archive armhf rpi_3_32b_defconfig arm-linux-gnueabihf- pi3"
        "create_u_boot_archive arm64 rpi_3_defconfig aarch64-linux-gnu- pi3"
        "create_u_boot_archive arm64 rpi_4_defconfig aarch64-linux-gnu- pi4"
        )
else
    >&2 echo "Error: Unknown bootloader type ${BOOTLOADER_TYPE}."
    exit 1
fi

UPSTREAM_ARCHIVE="${SCRIPTDIR}/upstream-${BOOTLOADER_TYPE}-${VERSION_LABEL}.tar.gz"
if [ ! -f "${UPSTREAM_ARCHIVE}" ]
then
    wget -O "${UPSTREAM_ARCHIVE}" "${ARCHIVE_URL}"
fi

for item in "${PROCESSING_INSTRUCTIONS[@]}"
do
    ${item}
done

cleanup
trap - EXIT

