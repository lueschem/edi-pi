---
- name: Ensures edi-boot-shim config.d directory exists.
  file:
    path: /etc/edi-boot-shim/edi-boot-shim.cfg.d
    state: directory

- name: Configure edi-boot-shim for multiboot.
  template:
    src: multiboot.cfg
    dest: /etc/edi-boot-shim/edi-boot-shim.cfg.d

- name: Install edi-boot-shim.
  apt:
    name: edi-boot-shim
    install_recommends: no

- name: Create boot firmware directory.
  file:
    path: "{{ bootloader_location }}"
    state: directory

- name: Create boot firmware image directory.
  file:
    path: "{{ bootloader_image_location }}"
    state: directory
  when: ebs_bootloader_type == "raspberry-pi"

- name: Setup boot configuration (u-boot).
  copy:
    src: config.txt.{{ ebs_bootloader_type }}.{{ edi_bootstrap_architecture }}
    dest: "{{ bootloader_location }}/config.txt"
  when: ebs_bootloader_type == "u-boot"

- name: Setup boot configuration (raspberry-pi).
  template:
    src: config.txt.{{ ebs_bootloader_type }}.{{ edi_bootstrap_architecture }}
    dest: "{{ bootloader_image_location }}/config.txt"
  when: ebs_bootloader_type == "raspberry-pi"

- name: Setup the kernel command line (u-boot).
  copy:
    src: cmdline.txt.{{ ebs_bootloader_type }}
    dest: "{{ bootloader_location }}/cmdline.txt"
  when: (mender_device_type in ["pi4", "pi4-v2", "pi4-v3", "pi5-v3"]) and ebs_bootloader_type == "u-boot"

- name: Setup the kernel command line.
  template:
    src: cmdline.txt.{{ ebs_bootloader_type }}
    dest: "{{ bootloader_image_location }}/cmdline.txt"
  when: ebs_bootloader_type == "raspberry-pi"

- name: Install the raspberrypi bootloader to the image location.
  unarchive:
    src: raspberrypi-bootloader.tar.gz
    dest: "{{ bootloader_image_location }}"
    owner: root
    group: root
    creates: "{{ bootloader_image_location }}/LICENCE.broadcom"
  when: ebs_bootloader_type == "raspberry-pi"

- name: Install the raspberrypi bootloader to the final location.
  unarchive:
    src: raspberrypi-bootloader.tar.gz
    dest: "{{ bootloader_location }}"
    owner: root
    group: root
    creates: "{{ bootloader_location }}/LICENCE.broadcom"
  when: ebs_bootloader_type == "u-boot"

- name: Install the u-boot bootloader.
  unarchive:
    src: u-boot-bootloader.{{ edi_bootstrap_architecture }}.{{ mender_device_type }}.tar.gz
    dest: "{{ bootloader_location }}"
    owner: root
    group: root
    creates: "{{ bootloader_location }}/u-boot.bin"
  when: ebs_bootloader_type == "u-boot"

- name: Install u-boot tools.
  apt:
    name:
    - libubootenv-tool
    - u-boot-tools
    state: present
    install_recommends: no
  when: ebs_bootloader_type == "u-boot"

- name: Copy the raw boot script to the boot folder.
  copy:
    src: boot.scr.txt
    dest: "{{ bootloader_location }}"
  when: ebs_bootloader_type == "u-boot"

- name: Create boot script.
  command: mkimage -A arm -T script -O linux -d boot.scr.txt boot.scr
  args:
    chdir: "{{ bootloader_location }}"
    creates: "{{ bootloader_location }}/boot.scr"
  when: ebs_bootloader_type == "u-boot"

- name: Create u-boot directory on data partition.
  file:
    path: /data/u-boot
    state: directory
  when: ebs_bootloader_type == "u-boot"

- name: Configure u-boot-tools.
  template:
    src: fw_env.config
    dest: /data/u-boot
  when: ebs_bootloader_type == "u-boot"

- name: Create symbolic link for the u-boot-tools config.
  file:
    src: "/data/u-boot/fw_env.config"
    dest: "/etc/fw_env.config"
    state: link
  when: ebs_bootloader_type == "u-boot"
