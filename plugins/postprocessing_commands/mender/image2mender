#!/bin/bash

# Copyright (C) 2020 Matthias Luescher
#
# Authors:
#  Matthias Luescher
#
# This file is part of the edi project configuration.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with the edi project configuration.  If not, see <http://www.gnu.org/licenses/>.

set -o errexit
set -o pipefail
set -o nounset

print_usage()
{
    cat <<EOF
Convert a full disk image into a mender update artifact.

Required arguments:
 -i IMAGE, --input=IMAGE                   : Partition image file that shall get converted into a mender update artifact.
 -o ARTIFACT, --output=ARTIFACT            : Name of the resulting mender update artifact.
 -a ARTIFACT_NAME, --artifact=ARTIFACT_NAME: Mender artifact name.
 -t DEVICE_TYPE, --type=DEVICE_TYPE        : The type of device supported by the update.
 -b BOOTLOADER, --bootloader=BOOTLOADER    : The selected bootloader ("u-boot" or "raspberry-pi").
Optional arguments:
 -h, --help                                : Print help text.
 --log=LEVEL                               : Use --log=DEBUG to trace all commands.
EOF
}

print_error()
{
    local MESSAGE="${1}"
    >&2 echo -e "\033[91mError: ${MESSAGE}\033[0m"
}

print_error_and_exit()
{
    local MESSAGE="${1}"
    print_error "${MESSAGE}"
    exit 1
}

unexpected_exit()
{
    print_error "Going to clean up after abnormal script termination."
    rm -f "${MENDER_ARTIFACT}"
    trap - EXIT
    print_error_and_exit "Abnormal script termination."
}

if ! options=$(getopt -o hi:o:a:t:b: -l help,log:,input:,output:,artifact:,type:,bootloader: -- "$@")
then
    print_usage
    print_error_and_exit "Invalid option."
fi
eval set -- "$options"

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INPUT_IMAGE=""
MENDER_ARTIFACT=""
ARTIFACT_NAME=""
DEVICE_TYPE=""
LOG_LEVEL="INFO"
BOOTLOADER=""

while true
do
    case "${1}" in
        -h|--help)          print_usage && exit 0;;
        -i|--input)         INPUT_IMAGE="${2}"; shift 2;;
        -o|--output)        MENDER_ARTIFACT="${2}"; shift 2;;
        -a|--artifact)      ARTIFACT_NAME="${2}"; shift 2;;
        -t|--type)          DEVICE_TYPE="${2}"; shift 2;;
        -b|--bootloader)    BOOTLOADER="${2}"; shift 2;;
        --log)              LOG_LEVEL="${2}"; shift 2;;
        *)                  break ;;
    esac
done

if [ "${LOG_LEVEL}" == "DEBUG" ]; then
    set -x
fi

if [ -z "${INPUT_IMAGE}" ]
then
    print_usage
    print_error_and_exit "Missing input image parameter."
fi

if [ -z "${MENDER_ARTIFACT}" ]
then
    print_usage
    print_error_and_exit "Missing output artifact parameter."
fi

if [ -z "${DEVICE_TYPE}" ]
then
    print_usage
    print_error_and_exit "Missing device type parameter."
fi

if [ -z "${BOOTLOADER}" ]
then
    print_usage
    print_error_and_exit "Missing bootloader parameter."
fi

if ! which mender-artifact > /dev/null
then
    print_error "Missing mender-artifact executable. Mender update artifact will not be built."
    # Ignore this error for now since the update image might not be needed for every use case.
    echo "Mender update artifact not built due to missing mender-artifact executable." >> "${MENDER_ARTIFACT}"
    exit 0
fi

if [ "${DEVICE_TYPE}" == "pi2-armhf" ]
then
    COMPATIBLE_DEVICE=( "--device-type" "rpi-armhf" )
elif [ "${DEVICE_TYPE}" == "pi3-armhf" ]
then
    COMPATIBLE_DEVICE=( "--device-type" "rpi-armhf" )
elif [ "${DEVICE_TYPE}" == "pi3-arm64" ]
then
    COMPATIBLE_DEVICE=( "--device-type" "rpi-arm64" )
else
    COMPATIBLE_DEVICE=()
fi

INPUT_OPTION="--file"
MENDER_ARTIFACT_VERSION=$(mender-artifact --version)
MENDER_ARTIFACT_MAJOR_VERSION=$(echo "${MENDER_ARTIFACT_VERSION}" | cut -d' ' -f 3 | cut -d'.' -f 1)

if [[ ${MENDER_ARTIFACT_MAJOR_VERSION} -eq 2 ]]
then
    INPUT_OPTION="--update"
fi

# Special treatment for the Debian buster mender-artifact package:
if [[ ${MENDER_ARTIFACT_VERSION} == *"really2"* ]]
then
    INPUT_OPTION="--update"
fi

BOOTPARTITION_SETUP_SCRIPT=()
if [ "${BOOTLOADER}" == "raspberry-pi" ]
then
    BOOTPARTITION_SETUP_SCRIPT=( "--script" "${SCRIPTDIR}/ArtifactInstall_Enter_50_BootpartitionSetup" )
fi

mender-artifact write rootfs-image --device-type "${DEVICE_TYPE}" "${COMPATIBLE_DEVICE[@]}" \
    --artifact-name "${ARTIFACT_NAME}" ${INPUT_OPTION} "${INPUT_IMAGE}" --version 3 \
    --script "${SCRIPTDIR}/ArtifactInstall_Leave_50_ConfigurationBackup" \
    --script "${SCRIPTDIR}/ArtifactReboot_Leave_50_ConfigurationRestore" \
    "${BOOTPARTITION_SETUP_SCRIPT[@]}" \
    --output-path "${MENDER_ARTIFACT}"

trap - EXIT
