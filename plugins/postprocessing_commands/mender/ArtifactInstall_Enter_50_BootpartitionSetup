#!/bin/bash

# MIT License
#
# Copyright (c) 2021 Matthias LÃ¼scher
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -o nounset
set -o errexit
set -o pipefail

TRYBOOT_TXT=/boot/firmware/tryboot.txt
NEXT_ROOT_MNT=""
source /data/mender/device_type

print_and_exit()
{
    local TYPE=$1
    local MESSAGE=$2
    trap - EXIT
    if [ "${TYPE}" == "ERROR" ] ; then
        >&2 echo "error: ${MESSAGE}"
        exit 1
    else
        echo "${MESSAGE}"
        exit 0
    fi
}

trap_exit()
{
    trap - EXIT
    if [[ -n "${NEXT_ROOT_MNT}" ]]
    then
        umount "${NEXT_ROOT_MNT}" || true
    fi
    >&2 echo "Error: Script ${0} failed!"
    exit 1
}

if [[ $EUID -ne 0 ]]; then
    print_and_exit "ERROR" "use root user to execute this script"
fi

trap "trap_exit" EXIT

CURRENT_BOOT_DEVICE=$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')
if [ -z "${CURRENT_BOOT_DEVICE}" ] ; then
    print_and_exit "ERROR" "unable to detect root partition device"
fi

CURRENT_BOOT_PART=$(echo "${CURRENT_BOOT_DEVICE}" | grep -o '[1-9][0-9]*$')
if [ -z "${CURRENT_BOOT_PART}" ] ; then
    print_and_exit "ERROR" "unable to extract partition number of ${CURRENT_BOOT_DEVICE}"
fi

BOOT_PART_NUMBER_A=3
BOOT_PART_NUMBER_B=4

NEXT_BOOT_PART=""

if [[ ${CURRENT_BOOT_PART} -eq ${BOOT_PART_NUMBER_A} ]]
then
    NEXT_BOOT_PART=${BOOT_PART_NUMBER_B}
elif [[ ${CURRENT_BOOT_PART} -eq ${BOOT_PART_NUMBER_B} ]]
then
    NEXT_BOOT_PART=${BOOT_PART_NUMBER_A}
else
    print_and_exit "ERROR" "unable to determine next boot partition number"
fi

NEXT_BOOT_FOLDER="/boot/firmware/p${NEXT_BOOT_PART}"
NEXT_ROOT_MNT=$(mktemp -d -t next-root-XXXXXXXX --tmpdir=/tmp)

mount "/dev/mmcblk0p${NEXT_BOOT_PART}" "${NEXT_ROOT_MNT}"

rm -rf "${NEXT_BOOT_FOLDER}"
cp -r -L "${NEXT_ROOT_MNT}/boot/image-kernel" "${NEXT_BOOT_FOLDER}"
sed -i "s@^BOOTLOADER_DIRECTORY=.*@BOOTLOADER_DIRECTORY=\"/boot/firmware/p${NEXT_BOOT_PART}\"@" "${NEXT_ROOT_MNT}/etc/edi-boot-shim/edi-boot-shim.cfg.d/multiboot.cfg"

cp "${NEXT_ROOT_MNT}/boot/image-firmware/cmdline.txt" "${NEXT_BOOT_FOLDER}/cmdline.txt"
sed -i "s@__ROOTFS_PARTITION__@${NEXT_BOOT_PART}@" "${NEXT_BOOT_FOLDER}/cmdline.txt"

if [ "${device_type}" == "pi3-v3-arm64" ]
then
    cp "${NEXT_ROOT_MNT}/boot/image-firmware/start.elf" "/boot/firmware/p${NEXT_BOOT_PART}start.elf"
    cp "${NEXT_ROOT_MNT}/boot/image-firmware/fixup.dat" "/boot/firmware/p${NEXT_BOOT_PART}fixup.dat"
elif [ "${device_type}" == "pi4-v3-arm64" ]
then
    cp "${NEXT_ROOT_MNT}/boot/image-firmware/start4.elf" "/boot/firmware/p${NEXT_BOOT_PART}start4.elf"
    cp "${NEXT_ROOT_MNT}/boot/image-firmware/fixup4.dat" "/boot/firmware/p${NEXT_BOOT_PART}fixup4.dat"
fi

cp "${NEXT_ROOT_MNT}/boot/image-firmware/config.txt" "${TRYBOOT_TXT}"
sed -i "s@__ROOTFS_PARTITION__@${NEXT_BOOT_PART}@" "${TRYBOOT_TXT}"

umount "${NEXT_ROOT_MNT}"

trap - EXIT
